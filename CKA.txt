# Prepare system for alias 

alias k='kubectl'
alias kgn='kubectl get nodes -o wide'
alias kgp='kubectl get pods -o wide'
alias kgpl='kubectl get pods -o wide --show-labels'
alias kgsl='kubectl get services -o wide --show-labels'
alias kgdl='kubectl get deployments -o wide --show-labels'

# Imp: grep on any describe command output need to be checked throughly.

kubectl get pods -w
kubectl get events
kubectl get all --selector env=prod
kubectl run nginx --image=nginx --generator=run-pod/v1 --dry-run
kubectl get all -l env=prod,bu=finance,tier=frontend

# Logs
kubectl logs mypod --previous (seeing logs of crashed container)
kubectl logs fortune html-generator --previous

# Label 
kubectl get pods -l env=prod,bu=finance,tier=frontend
kubectl label pod kubia-manual-v2 env=debug --overwrite
kubectl label pod pod1 color=blue
kubectl label node node01 color=blue

# namespace
kubectl create namespace custom-namespace
kubectl create -f kubia-manual.yaml -n custom-namespace
kcd='kubectl config set-context $(kubectl config current-context) --namespace <namespace name>

# Using port-forwarder
kubectl port-forward nginx 8080:80

# edit 
kubectl edit rc kubia
export KUBE_EDITOR="/usr/bin/nano" (Configuring kubectl edit to use a different text editor)

# Job
kubectl get job

# Service and exec (services donâ€™t operate at the HTTP level.)
kubectl exec kubia-7nog1 -- curl -s http://10.111.249.153

# Explain 

kubectl explain pod.spec | grep -i livenessProbe
kubectl explain pod.spec.containers | grep -i livenessProbe

# Create and expose deployment -
kubectl run blue --image=nginx --replicas=6
kubectl expose pod redis --port=6379 --name redis-service
kubectl expose deployment webapp --type=NodePort --port=8080 --name=webapp-service --dry-run -o yaml > webapp-service.yaml

# update deployment
kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1 (this nginx name is container name)
kubectl edit deployment/nginx-deployment
kubectl scale deployment nginx-deployment --replicas=10

# edit pod /deployment
kubectl edit pod pod1 (it will save the temp file which you can deploy directly on server)
kubectl edit deployment my-deployment

# configmap
kubectl create configmap fortune-config --from-literal=sleep-interval=25
kubectl create configmap my-config --from-file=config-file.conf

# Taints and Tolerations (taint_tole.yaml)-
-------------------------------------------
kubectl taint nodes node01 spray=mortein:NoSchedule
kubectl taint nodes node01 key:NoSchedule-

# Node selector (pod_node_selector.yaml)
-------------------------------------------
kubectl label nodes node01 size=huge

# Node Affinity (pod_node_aff.yaml)
--------------------------------------------
kubectl label nodes node01 size=huge

# PODS Memory Requirement (pod.yaml)
--------------------------------------------

# Ingress
kubectl get ingresses

# Secret
$ openssl genrsa -out tls.key 2048
$ openssl req -new -x509 -key tls.key -out tls.cert -days 360 -subj CN=kubia.example.com
kubectl create secret tls tls-secret --cert=tls.cert --key=tls.key

# JSONPATH

kubectl get nodes -o wide  -o=jsonpath='{.items[*].status.capacity.cpu}'
kubectl get nodes -o wide  -o=jsonpath='{.items[*].metadata.name}{"\n"}{.items[*].status.capacity.cpu}'
kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'
kubectl get nodes --sort-by= .status.capacity.cpu

kubectl get nodes -o=jsonpath='{.items[*].metadata.name}'
kubectl get nodes -o=jsonpath='{.items[*].status.nodeInfo.osImage}'

kubectl config view --kubeconfig=/root/my-kube-config